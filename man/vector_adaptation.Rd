% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/find_centroid.R, R/vector_adaptation.R
\name{vector_adaptation}
\alias{vector_adaptation}
\title{Vector adaptation}
\usage{
vector_adaptation(mat, positive = NULL, result = "analogies",
  operation = "*", sorted = T, exclude = T)

vector_adaptation(mat, positive = NULL, result = "analogies",
  operation = "*", sorted = T, exclude = T)
}
\arguments{
\item{positive}{A character vector of terms naming the rows to be computed.}

\item{result}{A string. If "analogies" then it returns similar terms, just like find_analogies.
                        if "vector" will return the centroid vector.}

\item{operation}{A character vector (either "+" or "*"), that controls whether the vectors
                will be added as simple sums or as products. Default is "*".}

\item{sorted}{A logical value.}

\item{exclude}{A logical value. If TRUE, the computed terms ('positive' and 'negative') will
              be excluded from the results.}

\item{positive}{A character vector of terms naming the rows to be computed.}

\item{result}{A string. If "analogies" then it returns similar terms, just like find_analogies.
                        if "vector" will return the centroid vector.}

\item{operation}{A character vector (either "+" or "*"), that controls whether the vectors
                will be added as simple sums or as products. Default is "*".}

\item{sorted}{A logical value.}

\item{exclude}{A logical value. If TRUE, the computed terms ('positive' and 'negative') will
              be excluded from the results.}
}
\description{
Combines word vectors using either addition or component-wise multiplication
then returns the 20 most similar terms.

Combines word vectors using either addition or component-wise multiplication
then returns the 20 most similar terms.
}
\section{Slots}{

\describe{
\item{\code{mat}}{A word-context matrix (format either matrix or \code{docMatrix}).}

\item{\code{mat}}{A word-context matrix (format either matrix or \code{docMatrix}).}
}}
\examples{
data(eebo)
vector_adaptation(mat = eebo, positive = c("wit", "sense"))
data(eebo)
vector_adaptation(mat = eebo, positive = c("wit", "sense"))
}

