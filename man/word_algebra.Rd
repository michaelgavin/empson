% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/word_algebra.R
\name{word_algebra}
\alias{word_algebra}
\title{Add and subtract word vectors}
\usage{
word_algebra(mat, positive = NULL, negative = NULL, operation = "+",
  transpose = F, sorted = T, exclude = T)
}
\description{
Performs basic word calculations to find analogous terms using the vector-offset method.
}
\section{Slots}{

\describe{
\item{\code{mat}}{A word-context matrix (format either matrix or \code{docMatrix}).}

\item{\code{positive}}{A character vector of terms to add.}

\item{\code{negative}}{A character vector of terms to subtract.}

\item{\code{operation}}{A character vector (either "+" or "*"), that controls whether the vectors
                will be added as simple sums or as products.}

\item{\code{transpose}}{A logical value. If TRUE, the matrix will be transposed and similar terms
                will be found across columns, rather than rows.}

\item{\code{exclude}}{A logical value. If TRUE, the computed terms ('positive' and 'negative') will
              be excluded from the results.}
}}
\section{What it does}{

This function attempts to replicate the word-offset method described in Mikolov,
et al. (2013). Generally speaking, it does not work very well, if by "work" we
expect that it will be able to find analogies, such that:
\deqn{mat['king',] - mat['man',] ~= mat['queen',] - mat['woman',]}

If the vector off-set method was working properly, we should be able to use these
calculations to infer relational similarity between terms. According to Turney and
Pantel (2010), it isn't supposed to be possible to infer relational similarity from
attribute similarity.
}

\section{Caveat}{

This function will not produce the desired results unless the underlying matrix
is transformed in some way that I do not yet understand. Frankly, working with this
has made me less impressed with word2vec.
}
\examples{
word_algebra(mat = eebo, positive = "body", negative = "soul")
word_algebra(mat = eebo, positive = c("heart", "soul"), negative = "mind")
word_algebra(mat = eebo, positive = c("king", "woman"), negative = "queen")

# Results tend to over-emphasize low-frequency terms. This
# can sometimes be counteracted by searching for similarity across the columns, rather
# than the rows.
word_algebra(mat = eebo, positive = c("king", "woman"), negative = "queen", transpose = T)

# If low-frequency terms are what you're most interested in, you can sometimes get cool
# but weird results using multiplication, rather than addition.
word_algebra(mat = eebo, positive = "mind", negative = "soul")
}

